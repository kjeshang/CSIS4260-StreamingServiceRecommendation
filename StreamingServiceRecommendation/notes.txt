Netlix, Amazon Prime, DisneyPlus:  'type', 'title', director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'listed_in', 'description'

https://www.spectrum.net/support/tv/tv-and-movie-ratings-descriptions

['PG-13',
 'TV-MA',
 'PG',
 'TV-14',
 'TV-PG',
 'TV-Y',
 'TV-Y7',
 'R',
 'TV-G',
 'G',
 'NC-17',
 '74 min',
 '84 min',
 '66 min',
 'NR',
 nan,
 'TV-Y7-FV',
 'UR',
 '13+',
 'ALL',
 '18+',
 '16+',
 '7+',
 'TV-NR',
 'UNRATED',
 '16',
 'AGES_16_',
 'AGES_18_',
 'ALL_AGES',
 'NOT_RATE']

Paramount = "type","title","production_countries","release_year","age_certification","runtime","genres","description"

Apple TV+: "Series Title", "Year Released", "Content Rating", "IMDB Rating", "R Rating", "Genre", "Description", "No of Seasons"

TFIDF results:
Input = Ganglands
Index = 2
Description = 'To protect his family from a powerful drug lord, skilled thief Mehdi and his expert team of robbers are pulled into a violent and deadly turf war.'
Normalized Description = 'tv-ma crime tv shows international action adventure protect family powerful drug lord skilled thief mehdi expert team robbers pulled violent deadly turf war'

Output = Narcos
Index = 5305
Description = "The true story of Colombia's infamously violent and powerful drug cartels fuels this gritty gangster drama series."
Normalized Description = "tv-ma crime tv shows action adventure dramas true story colombia 's infamously violent powerful drug cartels fuels gritty gangster drama series"


# def setup_tfidfMatrix(streaming_service_select):
#     print(streaming_service_select);
#     dff = df.copy();
#     tfidf = TfidfVectorizer(stop_words="english", min_df=0.005, sublinear_tf=True);
#     if (len(streaming_service_select) == 0) | (len(streaming_service_select) == 5):
#         tfidf_matrix = tfidf.fit_transform(dff["Textual Info"]);
#     else:
#         if len(streaming_service_select) == 4:
#             mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]) | (dff["Streaming Service"] == streaming_service_select[2]) | (dff["Streaming Service"] == streaming_service_select[3]);
#         if len(streaming_service_select) == 3:
#             mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]) | (dff["Streaming Service"] == streaming_service_select[2]);
#         if len(streaming_service_select) == 2:
#             mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]);
#         if len(streaming_service_select) == 1:
#             mask = (dff["Streaming Service"] == streaming_service_select[0]);
#         tfidf_matrix = tfidf.fit_transform(dff[mask]["Textual Info"]);
#     return tfidf_matrix;

# def get_recommendations(title_select, indices, cosine_sim=cosine_sim):
#     print(title_select);
#     idx = indices[title_select];
#     sim_scores = list(enumerate(cosine_sim[idx]));
#     sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True);
#     sim_scores = sim_scores[1:11];
#     movie_indices = [i[0] for i in sim_scores];
#     return df[["title","description","Streaming Service"]].iloc[movie_indices];

    # if (len(streaming_service_select) == 0) | (len(streaming_service_select) == 5):
    #     print("0 or 5 Streaming Services: " + str(dff["Streaming Service"].unique().tolist()));
    #     return dff;
    # else:
    #     if len(streaming_service_select) == 4:
    #         mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]) | (dff["Streaming Service"] == streaming_service_select[2]) | (dff["Streaming Service"] == streaming_service_select[3]);
    #     if len(streaming_service_select) == 3:
    #         mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]) | (dff["Streaming Service"] == streaming_service_select[2]);
    #     if len(streaming_service_select) == 2:
    #         mask = (dff["Streaming Service"] == streaming_service_select[0]) | (dff["Streaming Service"] == streaming_service_select[1]);
    #     if len(streaming_service_select) == 1:
    #         mask = (dff["Streaming Service"] == streaming_service_select[0]);
    #     print("Between 1 to 4 Streaming Services: " + str(dff[mask]["Streaming Service"].unique().tolist()));
    #     return dff[mask];

    def get_dataframeNLP(streaming_service_select):
    print(streaming_service_select);
    dff = df.copy();
    return dff[dff["Streaming Service"].isin(streaming_service_select)];

def setup_tfidfMatrix(dataframe):
    tfidf = TfidfVectorizer(stop_words="english", min_df=0.005, sublinear_tf=True);
    tfidf_matrix = tfidf.fit_transform(dataframe["Textual Info"]);
    return tfidf_matrix;

# dff = dff[dff["Streaming Service"].isin(streaming_service_select)];

# df_recommendations = df_recommendations[df_recommendations["Streaming Service"].isin(streaming_service_select)];


# pageStructure = [
#     dbc.Row(children=heading),
#     html.Br(),
#     dbc.Card(children=[
#         dbc.CardBody(children=[
#             dbc.Row(children=[
#                 dbc.Col(children=titleDropdownSelector, width=9),
#                 dbc.Col(children=streamingServiceChecklistFilter, width=3),
#             ]),
#             html.Br(),
#             dbc.Row(children=recommendationResultsInTable)
#         ])
#     ]),
# ];

# tfidf = TfidfVectorizer(stop_words="english", min_df=0.005, sublinear_tf=True);
# tfidf_matrix = tfidf.fit_transform(df["Textual Info"]);

# cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix);
# indices = pd.Series(df.index, index=df["title"]).drop_duplicates();

# @callback(
#     Output("recommendation_results", "children"),
#     [
#         Input("title_select", "value"),
#         Input("streaming_service_select", "value")
#     ]
# )
# def get_recommendationResultsTable(title_select, streaming_service_select):
#     if (title_select != None):
#         print(title_select);
#         print(streaming_service_select);
#         dff = get_dataframeNLP(title_select, streaming_service_select);
#         tfidf = TfidfVectorizer(stop_words="english", min_df=0.005, sublinear_tf=True);
#         tfidf_matrix = tfidf.fit_transform(dff["Textual Info"]);
#         cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix);
#         indices = pd.Series(dff.index, index=dff["title"]).drop_duplicates();
#         df_recommendations = get_recommendations(dff, title_select, indices, cosine_sim=cosine_sim);
#         dashTable = dash_table.DataTable(
#             style_cell={
#                 'whiteSpace':'normal',
#                 'height':'auto'
#             },
#             data=df_recommendations.to_dict('records'),
#             columns=[{"name": i, "id": i} for i in df_recommendations.columns if i != "id"],
#             id="tbl"
#         );
#         return dashTable;
#     else:
#         return html.P("No recommendation results");
